import React, { useState, useEffect } from 'react';
import { Play, Pause, SkipForward, Edit3, Download, RefreshCw } from 'lucide-react';

const PromptChainingDashboard = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [isAutoRunning, setIsAutoRunning] = useState(false);
  const [stepOutputs, setStepOutputs] = useState({});
  const [editingPrompt, setEditingPrompt] = useState(null);
  const [businessData, setBusinessData] = useState({
    industry: '',
    serviceSpecialization: '',
    geographicMarket: '',
    businessType: '',
    keyDifferentiators: '',
    targetClients: '',
    companySize: '',
    valueProp: '',
    certifications: ''
  });
  const [showBusinessForm, setShowBusinessForm] = useState(true);

  const workflowSteps = [
    {
      id: 1,
      title: "Market & SEO Research",
      llm: "Perplexity",
      color: "bg-blue-500",
      prompt: `1. Research {INDUSTRY} companies in {GEOGRAPHIC_MARKET} specializing in {SERVICE_SPECIALIZATION}. Provide a list of company names, their positioning, and notable naming conventions as of 2025. Focus on companies targeting {TARGET_CLIENTS} and analyze how they position their {KEY_DIFFERENTIATORS}.

2. Analyze current search trends and keyword opportunities for {INDUSTRY} services in {GEOGRAPHIC_MARKET}. Focus on {SERVICE_SPECIALIZATION} terminology, including search volumes, competition levels, and emerging keyword trends in 2025. Consider {BUSINESS_TYPE} positioning and {CERTIFICATIONS} if applicable. Output a table of primary and secondary keywords, their search volumes, and competition scores.

Please present the results in two clearly labeled sections: (A) Competitor/Naming Research and (B) SEO Keyword Research.`
    },
    {
      id: 2,
      title: "Keyword Expansion",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Using the competitor/naming research and SEO keyword research below, generate 50 long-tail, low-competition keywords for {INDUSTRY} services in {GEOGRAPHIC_MARKET}. Focus on {SERVICE_SPECIALIZATION} terms, include geographic modifiers, professional designations ({CERTIFICATIONS}), and question-based search phrases. Target {TARGET_CLIENTS} search behavior and {BUSINESS_TYPE} positioning. Categorize by: Primary Service Keywords, Geographic Keywords, Professional Keywords, and Question-Based Keywords.

Competitor/Naming Research:
{STEP_1_A}

SEO Keyword Research:
{STEP_1_B}`
    },
    {
      id: 3,
      title: "Gap Analysis",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Using the following long-tail keywords, identify keyword gaps and search opportunities in the {GEOGRAPHIC_MARKET} {INDUSTRY} market that competitors are not effectively targeting. Focus on emerging trends in {SERVICE_SPECIALIZATION} sectors. Analyze which search terms have commercial intent but minimal competition from established firms. Consider opportunities for {BUSINESS_TYPE} with {KEY_DIFFERENTIATORS} targeting {TARGET_CLIENTS}.

Long-Tail Keyword List:
{STEP_2_OUTPUT}`
    },
    {
      id: 4,
      title: "Search Intent Mapping",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Using the following keyword gaps and opportunities, analyze the competitive landscape for {INDUSTRY} keywords in {GEOGRAPHIC_MARKET}. Map search intent categories (informational, commercial, transactional) and identify strategic opportunities where new market entrants can gain competitive advantage. Focus on {SERVICE_SPECIALIZATION} and {BUSINESS_TYPE} positioning with {KEY_DIFFERENTIATORS}. Provide detailed reasoning for each opportunity assessment.

Keyword Gaps and Opportunities:
{STEP_3_OUTPUT}`
    },
    {
      id: 5,
      title: "Name Generation",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Using the following competitor list, keyword gaps, and search intent analysis, generate 20 company names for a {GEOGRAPHIC_MARKET} {INDUSTRY} firm specializing in {SERVICE_SPECIALIZATION}. Each name must:
- Incorporate identified low-competition keywords naturally
- Signal professional authority and trustworthiness
- Include subtle geographic relevance without limiting expansion
- Optimize for local SEO while maintaining brandability
- Differentiate from identified competitors
- Appeal to {TARGET_CLIENTS} and reflect {BUSINESS_TYPE} positioning
- Leverage {KEY_DIFFERENTIATORS} and {CERTIFICATIONS} if applicable

Provide names in these categories:
- 7 Keyword-Rich Names (direct service integration)
- 7 Hybrid Names (branded + keyword elements)
- 6 Brandable Names (unique positioning with SEO potential)

For each name, include: primary keyword integration, SEO advantage, and differentiation factor.

Competitor List:
{STEP_1_A}

Keyword Gaps and Search Intent Analysis:
{STEP_4_OUTPUT}`
    },
    {
      id: 6,
      title: "Tagline Development",
      llm: "ChatGPT",
      color: "bg-green-500",
      prompt: `For each of the following proposed company names, develop SEO-optimized taglines and business descriptors. Create phrases that:
- Target identified low-competition keywords
- Enhance local search visibility for {GEOGRAPHIC_MARKET}
- Communicate {SERVICE_SPECIALIZATION} expertise
- Support the primary company name's SEO strategy
- Appeal to {TARGET_CLIENTS} and reflect {VALUE_PROP}
- Incorporate {CERTIFICATIONS} and {KEY_DIFFERENTIATORS} naturally
- Provide additional keyword coverage without keyword stuffing

Proposed Company Names and Rationales:
{STEP_5_OUTPUT}`
    },
    {
      id: 7,
      title: "Multi-Criteria Assessment",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Score each company name + tagline combination using this framework:

SEO PERFORMANCE (40%):
- Keyword integration effectiveness (1-10)
- Search competition level assessment (1-10)
- Local SEO potential for {GEOGRAPHIC_MARKET} (1-10)
- Long-tail keyword expansion opportunities (1-10)

MARKET POSITIONING (30%):
- Professional credibility signals for {BUSINESS_TYPE} (1-10)
- Industry authority perception in {INDUSTRY} (1-10)
- Differentiation from identified competitors (1-10)
- Appeal to {TARGET_CLIENTS} (1-10)

DIGITAL VIABILITY (30%):
- Domain availability likelihood (1-10)
- Social media handle availability potential (1-10)
- Trademark conflict risk assessment (1-10)

Provide detailed scoring rationale and rank top 5 combinations with strategic reasoning for each score.

Name + Tagline Combinations:
{STEP_6_OUTPUT}`
    },
    {
      id: 8,
      title: "Market Validation",
      llm: "Perplexity",
      color: "bg-blue-500",
      prompt: `For the following top 5 company name recommendations, research current market conditions including:
- Domain availability status for .ca and .com extensions (and relevant {GEOGRAPHIC_MARKET} domains)
- Existing business registration conflicts in {GEOGRAPHIC_MARKET}
- Current search result analysis for name uniqueness in {INDUSTRY}
- Social media handle availability across major platforms
- Recent trademark applications in {INDUSTRY} and related business categories
- Potential conflicts with existing {BUSINESS_TYPE} firms

Top 5 Name + Tagline Combinations:
{STEP_7_OUTPUT}`
    },
    {
      id: 9,
      title: "Final Strategic Report",
      llm: "Claude Sonnet",
      color: "bg-orange-500",
      prompt: `Using the following validation results, create a comprehensive naming recommendation report for the {GEOGRAPHIC_MARKET} {INDUSTRY} client specializing in {SERVICE_SPECIALIZATION}. Structure as:

EXECUTIVE SUMMARY:
- Top 3 recommended name + tagline combinations
- Primary SEO advantages and competitive positioning for each
- Implementation priority ranking with strategic rationale for {BUSINESS_TYPE}

SEO STRATEGY ANALYSIS:
- Detailed keyword opportunity assessment for each recommendation
- Search competition analysis with specific market gaps identified
- Local SEO optimization pathway for {GEOGRAPHIC_MARKET} markets
- Long-term keyword expansion strategy for business growth
- Integration with {KEY_DIFFERENTIATORS} and {CERTIFICATIONS}

COMPETITIVE INTELLIGENCE:
- Market differentiation analysis with competitor weakness exploitation
- Search visibility projection based on current market conditions
- Digital asset acquisition strategy with cost-benefit analysis
- Performance tracking metrics and success KPIs for {TARGET_CLIENTS}

IMPLEMENTATION ROADMAP:
- Phase-by-phase implementation strategy
- Legal protection priorities and trademark filing recommendations
- Digital marketing integration plan leveraging {VALUE_PROP}
- 6-month and 12-month milestone targets

Validation Results:
{STEP_8_OUTPUT}`
    }
  ];

  const [prompts, setPrompts] = useState(workflowSteps);

  const simulateAPICall = async (prompt, llm) => {
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
    
    const responses = {
      1: `(A) COMPETITOR/NAMING RESEARCH:
- Prairie Valuations Ltd. - Traditional, geographic focus
- Western Appraisal Group - Regional positioning
- Multifamily Assessment Corp - Service-specific naming
- StorageValue Pro - Niche specialization

(B) SEO KEYWORD RESEARCH:
Primary Keywords: commercial appraisal (2,400/mo, High competition)
Secondary Keywords: multifamily valuation (890/mo, Medium competition)
Long-tail: Alberta self storage appraisal (110/mo, Low competition)`,
      
      2: `CATEGORIZED LONG-TAIL KEYWORDS:

Primary Service Keywords:
- Multifamily property appraisal Alberta (45/mo)
- Self storage facility valuation BC (38/mo)
- Commercial real estate assessment Saskatchewan (52/mo)

Geographic Keywords:
- Calgary multifamily appraiser (28/mo)
- Vancouver self storage valuation (31/mo)
- Winnipeg commercial appraisal services (22/mo)

Professional Keywords:
- AACI certified appraiser Western Canada (15/mo)
- CRA designated multifamily valuator (12/mo)`,
      
      default: `Generated output for ${llm} processing step with comprehensive analysis and recommendations...`
    };
    
    return responses[currentStep + 1] || responses.default;
  };

  const executeStep = async (stepIndex) => {
    setIsRunning(true);
    const step = prompts[stepIndex];
    
    let processedPrompt = step.prompt;
    
    Object.entries(businessData).forEach(([key, value]) => {
      const placeholder = key.replace(/([A-Z])/g, '_$1').toUpperCase();
      processedPrompt = processedPrompt.replace(new RegExp(`{${placeholder}}`, 'g'), value || '[Not specified]');
    });
    
    Object.keys(stepOutputs).forEach(key => {
      processedPrompt = processedPrompt.replace(`{${key}}`, stepOutputs[key] || '');
    });
    
    try {
      const output = await simulateAPICall(processedPrompt, step.llm);
      setStepOutputs(prev => ({
        ...prev,
        [`STEP_${step.id}_OUTPUT`]: output,
        [`STEP_${step.id}_A`]: step.id === 1 ? output.split('(B)')[0] : undefined,
        [`STEP_${step.id}_B`]: step.id === 1 ? output.split('(B)')[1] : undefined
      }));
    } catch (error) {
      console.error('Error executing step:', error);
    }
    
    setIsRunning(false);
  };

  const runAllSteps = async () => {
    setIsAutoRunning(true);
    for (let i = 0; i <= currentStep; i++) {
      setCurrentStep(i);
      await executeStep(i);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    setIsAutoRunning(false);
  };

  const updatePrompt = (stepIndex, newPrompt) => {
    setPrompts(prev => prev.map((step, index) => 
      index === stepIndex ? { ...step, prompt: newPrompt } : step
    ));
    setEditingPrompt(null);
  };

  const getLLMBadgeColor = (llm) => {
    switch (llm) {
      case 'Perplexity': return 'bg-blue-100 text-blue-800';
      case 'Claude Sonnet': return 'bg-orange-100 text-orange-800';
      case 'ChatGPT': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const BusinessDataForm = () => (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
      <div className="p-6 border-b border-gray-200">
        <h2 className="text-xl font-bold text-gray-900 mb-2">Business Information</h2>
        <p className="text-gray-600">Provide your business details to customize the naming workflow</p>
      </div>
      
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Industry/Sector *</label>
            <input
              type="text"
              value={businessData.industry}
              onChange={(e) => setBusinessData(prev => ({ ...prev, industry: e.target.value }))}
              placeholder="e.g., Commercial Real Estate Appraisal"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Service Specialization *</label>
            <input
              type="text"
              value={businessData.serviceSpecialization}
              onChange={(e) => setBusinessData(prev => ({ ...prev, serviceSpecialization: e.target.value }))}
              placeholder="e.g., Multifamily and Self-Storage Properties"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Geographic Market *</label>
            <input
              type="text"
              value={businessData.geographicMarket}
              onChange={(e) => setBusinessData(prev => ({ ...prev, geographicMarket: e.target.value }))}
              placeholder="e.g., Western Canada - Alberta, BC, Saskatchewan, Manitoba"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Business Type *</label>
            <input
              type="text"
              value={businessData.businessType}
              onChange={(e) => setBusinessData(prev => ({ ...prev, businessType: e.target.value }))}
              placeholder="e.g., Professional Services Firm"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Target Clients</label>
            <input
              type="text"
              value={businessData.targetClients}
              onChange={(e) => setBusinessData(prev => ({ ...prev, targetClients: e.target.value }))}
              placeholder="e.g., Property investors, developers, lenders"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Professional Certifications</label>
            <input
              type="text"
              value={businessData.certifications}
              onChange={(e) => setBusinessData(prev => ({ ...prev, certifications: e.target.value }))}
              placeholder="e.g., AACI, CRA, 15+ years experience"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">Key Differentiators</label>
            <textarea
              value={businessData.keyDifferentiators}
              onChange={(e) => setBusinessData(prev => ({ ...prev, keyDifferentiators: e.target.value }))}
              placeholder="e.g., AACI Certified, 15+ years experience, specialized in complex valuations"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              rows="3"
            />
          </div>
          
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">Value Proposition</label>
            <textarea
              value={businessData.valueProp}
              onChange={(e) => setBusinessData(prev => ({ ...prev, valueProp: e.target.value }))}
              placeholder="e.g., Fast turnaround, accurate valuations, comprehensive market analysis"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              rows="3"
            />
          </div>
        </div>
        
        <div className="mt-6 flex gap-4">
          <button
            onClick={() => {
              const requiredFields = ['industry', 'serviceSpecialization', 'geographicMarket', 'businessType'];
              const missingFields = requiredFields.filter(field => !businessData[field].trim());
              
              if (missingFields.length > 0) {
                alert(`Please fill in required fields: ${missingFields.join(', ')}`);
                return;
              }
              
              setShowBusinessForm(false);
            }}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            Start Naming Workflow
          </button>
          <button
            onClick={() => {
              setBusinessData({
                industry: 'Commercial Real Estate Appraisal',
                serviceSpecialization: 'Multifamily and Self-Storage Properties',
                geographicMarket: 'Western Canada - Alberta, BC, Saskatchewan, Manitoba',
                businessType: 'Professional Services Firm',
                keyDifferentiators: 'AACI Certified, 15+ years experience, specialized in complex valuations',
                targetClients: 'Property investors, developers, lenders',
                companySize: 'Small firm (2-5 appraisers)',
                valueProp: 'Fast turnaround, accurate valuations, comprehensive market analysis',
                certifications: 'AACI, CRA'
              });
            }}
            className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 font-medium"
          >
            Load Example Data
          </button>
        </div>
      </div>
    </div>
  );

  if (showBusinessForm) {
    return (
      <div className="max-w-4xl mx-auto p-6 bg-gray-50 min-h-screen">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Company Naming Workflow</h1>
          <p className="text-gray-600">Multi-stage prompt chaining for optimized naming strategy</p>
        </div>
        <BusinessDataForm />
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div className="p-6 border-b border-gray-200">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Company Naming Workflow Dashboard</h1>
          <p className="text-gray-600">Multi-stage prompt chaining for optimized naming strategy</p>
          
          <div className="flex gap-4 mt-4">
            <button
              onClick={() => executeStep(currentStep)}
              disabled={isRunning || isAutoRunning}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              {isRunning ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Play className="w-4 h-4" />}
              Execute Current Step
            </button>
            
            <button
              onClick={runAllSteps}
              disabled={isRunning || isAutoRunning}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50"
            >
              {isAutoRunning ? <RefreshCw className="w-4 h-4 animate-spin" /> : <SkipForward className="w-4 h-4" />}
              Run All Steps
            </button>
            
            <button
              onClick={() => setShowBusinessForm(true)}
              className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
            >
              <Edit3 className="w-4 h-4" />
              Edit Business Data
            </button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <h2 className="text-lg font-semibold mb-4">Workflow Steps</h2>
            <div className="space-y-2">
              {prompts.map((step, index) => (
                <div
                  key={step.id}
                  onClick={() => setCurrentStep(index)}
                  className={`p-3 rounded-lg cursor-pointer border-2 transition-all ${
                    currentStep === index 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Step {step.id}</span>
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getLLMBadgeColor(step.llm)}`}>
                        {step.llm}
                      </span>
                      {stepOutputs[`STEP_${step.id}_OUTPUT`] && (
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      )}
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 font-medium">{step.title}</p>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold">Step {prompts[currentStep].id}: {prompts[currentStep].title}</h3>
                  <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium mt-2 ${getLLMBadgeColor(prompts[currentStep].llm)}`}>
                    {prompts[currentStep].llm}
                  </span>
                </div>
                <button
                  onClick={() => setEditingPrompt(currentStep)}
                  className="flex items-center gap-2 px-3 py-2 text-gray-600 hover:text-gray-800"
                >
                  <Edit3 className="w-4 h-4" />
                  Edit Prompt
                </button>
              </div>
            </div>

            <div className="p-4">
              {editingPrompt === currentStep ? (
                <div className="space-y-4">
                  <textarea
                    value={prompts[currentStep].prompt}
                    onChange={(e) => updatePrompt(currentStep, e.target.value)}
                    className="w-full h-64 p-3 border border-gray-300 rounded-lg resize-none font-mono text-sm"
                  />
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditingPrompt(null)}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      Save Changes
                    </button>
                    <button
                      onClick={() => setEditingPrompt(null)}
                      className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Prompt:</h4>
                    <div className="bg-gray-50 p-3 rounded-lg border">
                      <pre className="text-sm text-gray-700 whitespace-pre-wrap font-mono">
                        {prompts[currentStep].prompt}
                      </pre>
                    </div>
                  </div>

                  {stepOutputs[`STEP_${prompts[currentStep].id}_OUTPUT`] && (
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Output:</h4>
                      <div className="bg-green-50 p-3 rounded-lg border border-green-200">
                        <pre className="text-sm text-gray-700 whitespace-pre-wrap">
                          {stepOutputs[`STEP_${prompts[currentStep].id}_OUTPUT`]}
                        </pre>
                      </div>
                    </div>
                  )}

                  {isRunning && currentStep === prompts.findIndex(p => p.id === prompts[currentStep].id) && (
                    <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                      <div className="flex items-center gap-2">
                        <RefreshCw className="w-4 h-4 animate-spin text-blue-600" />
                        <span className="text-blue-600 font-medium">Processing with {prompts[currentStep].llm}...</span>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PromptChainingDashboard;